{"version":3,"sources":["redux/constant.js","redux/actions/counter.js","containers/Counter/index.jsx","containers/Person/index.jsx","redux/actions/person.js","App.js","redux/reducers/person.js","redux/reducers/index.js","redux/reducers/counter.js","redux/store.js","index.js"],"names":["INCREMENT","DECREMENT","ADD_PERSON","increment","data","type","Counter","state","car","value","selectNum","props","sub","decrement","incrementIfOdd","count","asynAdd","incrementAsync","this","people","length","ref","c","onClick","Component","connect","time","dispatch","setTimeout","Person","addPerson","newPerson","id","nanoid","name","pName","age","pAge","console","log","placeholder","map","personObj","App","React","initState","combineReducers","preState","action","createStore","reducer","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.f7074de0.chunk.js","sourcesContent":["export const INCREMENT = 'increment'\r\nexport const DECREMENT = 'decrement'\r\nexport const ADD_PERSON = 'add_person'","//专门用于返回产生的action {type:'add',data:1}\r\nimport {INCREMENT,DECREMENT} from '../constant'\r\nexport const increment = (data) => ({type:INCREMENT,data})\r\nexport const decrement = (data) => ({type:DECREMENT,data})\r\n//创建一个异步的action 返回的是一个函数\r\nexport const incrementAsync = (data,time) => {\r\n    //返回的函数让store执行 它知道是个函数，也知道是个异步动作，等待一段时间后  就会执行同步的操作\r\n    //所以会返回一个dispatch 直接发送给reducer\r\n    return (dispatch) => {\r\n        setTimeout(() => {\r\n            dispatch(increment(data));\r\n        },time);\r\n    }\r\n}","//引入connect进行连接\r\nimport {connect} from 'react-redux'\r\n//引入actions\r\nimport {increment,\r\n        decrement,\r\n        incrementAsync} from '../../redux/actions/counter'\r\n\r\nimport React, { Component } from 'react';\r\nclass Counter extends Component {\r\n    state = {car:'奔驰GL300'};\r\n    increment = () => {\r\n        //获取下拉框的值\r\n        const {value} = this.selectNum;\r\n        this.props.increment(value*1);\r\n    }\r\n    sub = () => {\r\n    const {value} = this.selectNum;\r\n    this.props.decrement(value);\r\n    }\r\n    incrementIfOdd = () => {\r\n        //获取下拉框的值\r\n        const {value} = this.selectNum;\r\n        if(this.props.count % 2 !==0){\r\n        this.props.increment(value*1);\r\n        }     \r\n    }\r\n    asynAdd = () => {\r\n        const {value} = this.selectNum;\r\n        this.props.incrementAsync(value*1,500);\r\n    }\r\n    render() {\r\n    return (\r\n        <div>\r\n            <h2>我是counter组件,下方组件人数为{this.props.people.length}</h2>\r\n            <h2>当前求和为{this.props.count}</h2>\r\n            <select ref={c => this.selectNum = c}>\r\n                <option value=\"1\">1</option>\r\n                <option value=\"2\">2</option>\r\n                <option value=\"3\">3</option>\r\n            </select> \r\n            <button onClick={this.increment}>+</button>\r\n            <button onClick={this.sub}>-</button>\r\n            <button onClick={this.incrementIfOdd}>当和为奇数加</button>\r\n            <button onClick={this.asynAdd}>异步加</button>\r\n        </div>\r\n    );\r\n    }\r\n}\r\n        \r\n//映射状态到容器  {return {count:state}}   简写方式 => ({count:state})\r\n/*\r\nconst mapStateToProps = state =>  ({count:state})\r\n \r\n//映射操作状态的方法到容器\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        increment:num => dispatch(createIncrementAction(num*1)),\r\n        decrement:num => dispatch(createDecrementAction(num*1)),\r\n        incrementAsync: (num,time) => dispatch(createIncrementAsyncAction(num*1,time))\r\n    }\r\n}\r\n*/\r\n/*\r\n1.当涉及到给子组件传递redux状态，和操作redux状态的方法时，connect第一次调用要传入两个参数（都是函数）\r\n2.参数一：mapStateToProps  参数二：mapDispatchToProps\r\n3.第二次调用传递时UI组件，建立关联\r\n*/\r\n//重点  connect(mapStateToProps,mapDispatchToProps)(CountUI)\r\n\r\n//普通写法\r\n//export default connect(mapStateToProps,mapDispatchToProps)(CountUI)\r\n\r\n//简写方法\r\nexport default connect(\r\n    state => ({count:state.count,people:state.people}),\r\n    //当传入的第二个参数是个对象而不是函数时，react-redux会帮你自动分发dispatch(action)\r\n    {\r\n        increment,\r\n        decrement,\r\n        incrementAsync\r\n    }\r\n    )(Counter)","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux'\r\nimport {addPerson} from '../../redux/actions/person'\r\nimport {nanoid} from 'nanoid'\r\nclass Person extends Component {\r\n  addPerson = () => {\r\n    const id = nanoid();\r\n    const name = this.pName.value;\r\n    const age = this.pAge.value*1;\r\n    const newPerson = {id,name,age};\r\n    console.log(newPerson);\r\n    //利用props添加redux Person的数据\r\n    this.props.addPerson(newPerson);\r\n    this.pName.value='';\r\n    this.pAge.value='';\r\n  }\r\n  render() {\r\n    return (\r\n      <div>       \r\n          <h2>我是Person组件,上方组件求和为{this.props.count}</h2>\r\n          <input ref={c => this.pName = c} type=\"text\" placeholder=\"请输入姓名\"/>\r\n          <input ref={c => this.pAge = c} type=\"text\" placeholder=\"请输入年龄\"/>\r\n          <button onClick={this.addPerson}>添加</button>\r\n          <ul>\r\n              {\r\n                this.props.people.map( personObj => {\r\n                  return <li key={personObj.id}>姓名：{personObj.name}----年龄：{personObj.age}</li>\r\n                })\r\n              }\r\n          </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default connect(\r\n  //映射状态\r\n  state => ({people:state.people,count:state.count}),\r\n  //映射操作状态的方法\r\n  {\r\n    addPerson\r\n  }\r\n)(Person)\r\n","import {ADD_PERSON} from '../constant'\r\nexport const addPerson = (personObj) => ({type:ADD_PERSON,data:personObj})","import React from 'react'\nimport CountContainer from './containers/Counter'\nimport PersonContainer from './containers/Person'\nexport default class App extends React.Component{\n  render(){\n    return (\n      <div>\n        {/* 引用了react-redux的provider就可以为每一个容器提供store */}\n        {/* 给容器传入store */}\n        {/* < CountContainer store={store}/> */}\n        < CountContainer/>\n        <hr/>\n        <PersonContainer/>\n      </div>\n    )\n  } \n}\n","import {ADD_PERSON} from '../constant'\r\nimport {nanoid} from 'nanoid'\r\nconst initState = [{id:nanoid(),name:'kobe',age:41}]\r\nexport default function personReducer(preState=initState,action){\r\n    //获取action中的type,data\r\n    const {type,data} = action;\r\n    switch(type){\r\n        case ADD_PERSON:\r\n            return [data,...preState]\r\n        default:\r\n            return preState  \r\n    }\r\n}","import count from './counter'\r\nimport people from './person'\r\nimport {combineReducers} from 'redux'\r\nexport default combineReducers({\r\n    count,\r\n    people,\r\n});","//reducer是个函数\r\n//接收preState,action,返回一个处理后的state\r\nimport {INCREMENT,DECREMENT} from '../constant'\r\n//初始化的值\r\nconst initState = 0;\r\nexport default function countReducer(preState=initState,action) {\r\n    //action中有type,data\r\n    const {type,data} = action;\r\n    //判断type的类型，然后决定如何加工数据\r\n    switch(type){\r\n        case INCREMENT:\r\n            return preState+data;\r\n        case DECREMENT:\r\n            return preState-data;\r\n        default://初始化 默认值\r\n            return preState;\r\n    }\r\n}","//整个应用只有一个store对象\r\n//引入createStore方法 创建store对象\r\nimport {createStore,applyMiddleware} from 'redux'\r\n//引入redux-thunk的一个中间件  使得store.dispatch()能够处理一个函数\r\nimport thunk from 'redux-thunk'\r\n//引入所有的reducer\r\nimport reducer from './reducers'\r\n//创建store对象，并且把它暴露出去\r\nexport default createStore(reducer,applyMiddleware(thunk));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './redux/store';\nimport {Provider} from 'react-redux'\n\nReactDOM.render(\n      //为每一个容器组件提供store \n      <Provider store={store}>\n        <App />\n      </Provider>,\n      document.getElementById('root'));\n\n//引入了react-redux就不需要监听redux中状态的变化，因为容器已经connect(store,UI)了\n//监听redux状态变化 重新渲染页面\n// store.subscribe(() => {\n//   ReactDOM.render(<App />,document.getElementById('root')\n// );\n//});\n\n"],"sourceRoot":""}